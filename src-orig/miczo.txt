10 DEFINT A-Z
20 CLS : PRINT : PRINT "  EVENT DRIVEN SIMULATOR":PRINT
22 PRINT "HR: MIN","VALUE":PRINT "-------","-----"
30 MX=400                        ' MAXIMUM NUMBER OF LOGIC GATES 
40 W1=100                        ' MAX TIMING WHEEL SIZE 
50 W2=200                        ' MAX QUEUE SIZE
60 DIM F(MX)                     ' GATE FUNCTION
70 DIM NA(MX)                    ' GATE NAME
80 DIM D(MX)                     ' GATE DELAY
90 DIM IP(3,MX)                  ' GATE INPUTS (MX OF 4)
100 DIM DS(MX)                   ' DESTINATION OF SIGNAL
110 DIM VA(1,MX)                 ' GATE VALUE (2 BITS)
120 DIM WH(W1)                   ' TIMING WHEEL USAGE BIT
130 DIM LP(W1)                   ' LINK POINTER TO QUEUE
140 DIM US(W2)                   ' USAGE > 0 IF ENTRY IN THIS SLOT
150 DIM QU(W2)                   ' QUEUE - CONTAINS NAME OF ENTRY
170 DIM FT(W2)                   ' FUTURE TIME
180 DIM LK(W2)                   ' LINK POINTER TO NEXT ENTRY IN STRING
190 DIM LF(W2)                   ' LINK FLAG
200 DIM VL(1,W2)                 ' NEW SIMULATION VALUE
210 ZX=0
230 FOR I=0 TO MX                ' -------- READ CIRCUIT DESCRIPTION --------
240 READ F$:FC=9
250 IF F$="I" THEN FC=1 ELSE IF F$="A" THEN FC=2 ELSE IF F$="O" THEN FC=3
260 IF F$="N" THEN FC=4 ELSE IF F$="Y" THEN FC=5 ELSE IF F$="D" THEN FC=6
270 IF F$="F" THEN FC=7 ELSE IF F$="ENDCKT" THEN FC=8
280 ON FC GOTO 290,330,330,310,300,310,320,400,340
290 GOSUB 370:READ DS(NM):GOTO 350
300 GOSUB 370:READ IP(0,NM):GOTO 350
310 GOSUB 370:READ D(NM),IP(0,NM),DS(NM):GOTO 350
320 GOSUB 370:FOR J=0 TO 3: READ IP(J,NM): NEXT J : GOTO 350
330 GOSUB 370:READ D(NM): FOR J=0 TO 3: READ IP(J,NM): NEXT J: READ DS(NM): GOTO 350
340 PRINT "ILLEGAL FUNCTION CODE",F$: STOP
350 NEXT I
360 PRINT "CIRCUIT SIZE EXCEEDS LIMIT": STOP
370 READ NM:IF NM > MX THEN 390
375 VA(0,NM)=0:VA(1,NM)=1        ' INITIAL VALUE OF ALL ELEMENTS SET TO "X"
380 F(NM)=FC:NA(NM)=NM:RETURN
390 PRINT "INVALID NAME",NM:STOP
400 ES=0                         ' END OF SIMULATION FLAG ES = 0
405 FF=0                         ' SET FANOUT FLAG=0
440 MI=0:HR=0     
450 SZ=0:SR=0:SM=0               ' INITIAL STIMULUS TIME/HOUR=0/MINUTES=0
455 GOTO 490
460 MI=MI+1                      ' UPDATE SIMULATION TIME
465 IF MI>=W1 THEN 470
467 IF WH(MI)=0 THEN 460 ELSE 790' IF NO ACTIVITY -- UPDATE TIME 
470 MI=0:HR=HR+1
480 IF SZ=9999 THEN STOP ELSE 510
490 READ SZ:IF SZ=9999 THEN 467
510 SM=SZ:SR=0
520 IF SM<W1 THEN 540
530 SM=SM-W1:SR=SR+1:GOTO 520
540 IF HR<SR THEN 467            ' DONT READ STIMULUS
610 READ NM$:IF NM$="*" THEN 490
620 NM=VAL(NM$)
630 READ VA$:Z2(0)=0:Z2(1)=1     ' INITIALIZE VALUE TO X
640 IF VA$="0" THEN Z2(1)=0 ELSE IF VA$="1" THEN Z2(0)=1
670 Z1=NM:Z3=SR:Z4=SM
680 GOSUB 1710
690 GOTO 610
715 ' ------------------ BEGIN SIMULATION ---------------
716 '
785 '     <<<<<< GET FANOUT FOR CHANGING GATES >>>>>>
786 '     <<<<<< PUT ON QUEUE AT FUTURE TIME >>>>>>
787 '
790 QP=LP(MI)                    ' GET POINTER TO FIRST QUEUE ENTRY TO BE UPDATED
800 IF HR<FT(QP) THEN 879
810 NM=QU(QP)                    ' GET NAME OF ELEMENT IN QUEUE
812 IF VA(0,NM)=VL(0,QP) AND VA(1,NM)=VL(1,QP) THEN GOTO 879
814 VA(0,NM)=VL(0,QP)            ' UPDATE VALUE ON THE OUTPUT
816 VA(1,NM)=VL(1,QP)            '  -- OF ELEMENT IN QUEUE 
820 FX=F(NM)                     ' GET FUNCTION OF THIS ELEMENT
830 IF FX=7 THEN 1315            ' FANOUT FUNCTION SHOULD NOT BE IN QUEUE
840 ND=DS(NM)                    ' GET NAME OF DESTINATION GATE
850 FY=F(ND)                     ' GET FUNCTION OF DESTINATION GATE
860 ON FY GOSUB 1000,1010,1100,1200,1290,1260,920 ' COMPUTE ITS NEW VALUE
865 IF FY=5 OR FY=7 THEN 879     ' DO NOT PUT PRIMARY OUTPUT ON WHEEL
870 Z1=ND
871 Z2(0)=NV(0):Z2(1)=NV(1)
873 Z3=HR
874 Z4=MI+D(ND)
876 IF Z4<W1 THEN 878
877 Z4=Z4-W1:Z3=Z3+1:GOTO 876
878 GOSUB 1710
879 IF FF=1 THEN RETURN                    ' IF FF=1, CONTINUE FANOUT PROCESSING
890 IF LF(QP)=0 THEN GOSUB 1880:GOTO 460   ' IF ZERO, GOTO PURGE ROUTINE
900 QP=LK(QP):GOTO 800                     ' ELSE, GET NEXT ELEMENT IN QUEUE LINK LIST
920 ' ------------------- COME HERE TO PROCESS FANOUT ELEMENT ---
922 IF FF=1 THEN 1320
930 VA(0,ND)=VA(0,NM)
935 VA(1,ND)=VA(1,NM)
940 FF=1:NF=ND
943 FOR FO=0 TO 3
946 ND=IP(FO,NF)
947 IF ND=0 THEN 952
949 GOSUB 850
952 NEXT FO
955 FF=0
958 GOTO 890
960 ' ------------------ COMPUTE NEW VALUES ON LOGIC ELEMENTS --- 
1000 PRINT "CANNOT HAVE FANOUT TO PRIMARY INPUT":STOP
1010 NV(0)=1:NV(1)=1
1030 FOR IX=0 TO 3               ' *** AND *** 
1040 TM=IP(IX,ND)
1050 IF TM=0 THEN 1080           ' IF INPUT NOT CONNECTED 
1060 NV(0)=NV(0) AND VA(0,TM)    ' -- THEN SKIP COMPUTATION
1070 NV(1)=NV(1) AND VA(1,TM)
1080 NEXT IX
1090 RETURN
1100 NV(0)=0:NV(1)=0             ' **** OR ***
1120 FOR IX=0 TO 3
1130 TM=IP(IX,ND)
1140 IF TM=0 THEN 1170
1150 NV(0)=NV(0) OR VA(0,TM)
1160 NV(1)=NV(1) OR VA(1,TM)
1170 NEXT IX
1180 RETURN
1200                             ' *** INVERT ***
1210 TM=IP(0,ND)
1230 NV(0)=1-VA(1,TM):NV(1)=1-VA(0,TM)
1250 RETURN
1260 TM=IP(0,ND)                 ' *** DELAY ***
1270 NV(0)=VA(0,TM):NV(1)=VA(1,TM)
1280 RETURN
1289                             ' *** PRIMARY OUTPUT ***
1290 IF VA(0,ND)=VA(0,NM) AND VA(1,ND)=VA(1,NM) THEN RETURN
1300 VA(0,ND)=VA(0,NM):VA(1,ND)=VA(1, NM)
1303 IF VA(0,ND)=1 THEN LO$="1" ELSE IF VA(1,ND)=0 THEN LO$="0" ELSE LO$="X" 
1305 PRINT RIGHT$("0"+STR$(HR),2);":";RIGHT$("0"+STR$(MI),2),LO$
1310 RETURN
1315 PRINT "FANOUT ELEMENT SHOULD NOT BE IN QUEUE": STOP
1320 PRINT "FANOUT NOT PERMITTED TO DRIVE FANOUT": STOP
1330 '
1700 ' ------------- PUT NEW ENTRY AT END OF LINKED LIST -------------
1701 '    CALL WITH
1702 '       Z1 = GATE NAME
1703 '       Z2 = NEW VALUE
1704 '       Z3 = STIMULUS HOUR
1705 '       Z4 = STIMULUS MINUTE
1710 FOR Z5=ZX TO W2            ' FIND EMPTY SLOT IN QUEUE
1720 IF US(Z5)=0 THEN 1735 ELSE NEXT Z5
1722 FOR Z5=0 TO ZX-1
1724 IF US(Z5)=0 THEN 1735 ELSE NEXT Z5
1730 PRINT "NO MORE ROOM IN EVENT QUEUE" : STOP
1735 ZX=Z5
1740 IF WH(Z4)>0 THEN 1780
1750 WH(Z4)=1:LP(Z4)=Z5          ' SET LINK BIT AND LINK POINTER
1760 QU(Z5)=Z1:VL(0,Z5)=Z2(0):VL(1,Z5)=Z2(1):FT(Z5)=Z3 ' PUT ENTRY IN QUEUE
1770 US(Z5)=1:LF(Z5)=0:RETURN    ' SET USAGE BIT, ZERO LINK BIT
1780 SK=LP(Z4)                   ' GET LINK POINTER FROM WHEEL
1790 FOR K1=1 TO W1
1810 IF LF(SK)=0 THEN 1840       ' IF LINK FLAG=0, REACHED END OF LINKED LIST
1815 SK=LK(SK)                   ' GET LINK POINTER
1820 NEXT K1
1830 PRINT "CANNOT FIND END OF LINKED LIST": STOP
1840 LK(SK)=Z5                   ' INSERT POINTER TO NEXT STRING ENTRY
1850 US(Z5)=1                    ' SET USAGE BIT
1860 LF(SK)=1                    ' LINK FLAG = 1
1870 GOTO 1760
1880 ' ----------------------- PURGE WHEEL ----------------------------------
1890 QP=LP(MI)
1900 IF HR=FT(QP) AND LF(QP)=0 THEN WH(MI)=0:US(QP)=0: RETURN
1910 IF HR<FT(QP) AND LF(QP)=0 THEN RETURN
1920 IF HR<FT(QP) THEN UX=QP:QP=LK(QP):GOTO 1950
1930 US(QP)=0:QP=LK(QP)
1940 LP(MI)=QP:GOTO 1900
1950 IF HR=FT(QP) AND LF(QP)=0 THEN QP(UX)=0: RETURN
1960 IF HR<FT(QP) AND LF(QP)=0 THEN RETURN
1970 IF HR<FT(QP) THEN UX=QP:QP=LK(QP):GOTO 1950
1980 US(QP)=0:LK(UX)=LK(QP):QP=LK(QP):GOTO 1950
1990 ' ---------------------- END SIMULATOR --------------------------------
3000 DATA I,1,7
3010 DATA I,2,5
3020 DATA I,3,8
3030 DATA I,4,9
3040 DATA F,5,6,7,,
3050 DATA N,6,2,5,8
3060 DATA A,7,2,1,5,,,9
3070 DATA A,8,2,6,3,,,9
3071 DATA O,9,2,7,8,4,,10
3072 DATA Y,10,9
3080 DATA ENDCKT
3100 DATA 0,4,1,*
3101 DATA 3,2,0,4,0,*
3102 DATA 7,3,1,*
3103 DATA 14,2,1,*
3104 DATA 20,1,1,*
3106 DATA 30,2,0,*
3108 DATA 40,1,0,*
3110 DATA 50,4,1,*
3112 DATA 60,4,0,*
3118 DATA 90,2,1,*
3120 DATA 100,4,1,*
3122 DATA 110,1,1,*
3124 DATA 120,1,0,*
3126 DATA 130,4,0,*
3128 DATA 140,3,0,*
3130 DATA 150,1,1,*
3133 DATA 160,2,0,*
3135 DATA 398,4,1,*
3137 DATA 416,4,1,*
3139 DATA 440,4,0,*
3150 DATA 9999
